#!/bin/bash

#
#	$Id$
#
#	Execute midl on remote win32 machine
#
#	Neil Mayhew - 2007-11-19
# 
# COM Support Library helper script
# Copyright (C) 2007 SIL International
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#
# http://www.gnu.org/licenses/lgpl.html
# 

if [ $# -lt 2 ]; then
	echo Usage: $0 remote_host [-p remote_port] [midl args] /h foo.h input.idl
	exit 1
fi

REMOTE_HOST=$1
shift

if [ "$1" == "-p" ]; then
	REMOTE_PORT=$2
	shift
	shift
else
	REMOTE_PORT=22
fi

# Choose temporary directory on remote machine
DIR=$(ssh -p $REMOTE_PORT "$REMOTE_HOST" "mktemp -dt" | sed 's/\\/\//g' | sed 's/\r//g')
if [ -z "$DIR" ]
  then echo $(basename "$0"): Error choosing temporary directory on remote host.
  exit 1
fi

# Remove extra path information from the last and second last argument since it won't be helpful on Windows
arguments=($@)
arguments_size=${#arguments[@]}
INFILE=${arguments[$arguments_size-1]}
arguments[$arguments_size-1]=$(basename ${arguments[$arguments_size-1]})
OUTFILE_ORIG=${arguments[$arguments_size-2]}
arguments[$arguments_size-2]=$(basename ${arguments[$arguments_size-2]})

LAST=${arguments[$arguments_size-1]}
STEM=$(echo "$LAST" | sed 's/\.idl$//')

CMD="cd \"$DIR\" && midl"
CMD="$CMD ${arguments[@]}"

LOCAL_TMPDIR=$(mktemp -dt)

# Hack to avoid rewriting script in python to be more robust and happily handle commandline arguments:
# (eg could run: remote-midl.py --send ../input.idl --send ../fooDependency.tlb midl_arguments_here --get-back /foo/out.h --get-back ../output/out.tlb)
# If FwCellarTlb.idl, ViewsTlb.idl, or WorldPadTlb.idl are to be processed, then we need to send over FwKernelTlb.tlb
# There are probably other dependencies but they aren't necessarily used yet in the files in the IDLMakefile.
FILES_TO_SEND_TO_REMOTE_HOST=("$(dirname "$INFILE")/$LAST")
if [ "x$LAST" = "xFwCellarTlb.idl" ]; then
	FILES_TO_SEND_TO_REMOTE_HOST=("${FILES_TO_SEND_TO_REMOTE_HOST[@]}" "$(dirname "$INFILE")/FwKernelTlb.tlb")
fi
if [ "x$LAST" = "xViewsTlb.idl" ]; then
	FILES_TO_SEND_TO_REMOTE_HOST=("${FILES_TO_SEND_TO_REMOTE_HOST[@]}" "$(dirname "$INFILE")/FwKernelTlb.tlb")
fi
if [ "x$LAST" = "xWorldPadTlb.idl" ]; then
	FILES_TO_SEND_TO_REMOTE_HOST=("${FILES_TO_SEND_TO_REMOTE_HOST[@]}" "$(dirname "$INFILE")/FwKernelTlb.tlb" "$(dirname "$INFILE")/ViewsTlb.tlb")
fi
if [ "x$LAST" = "xCmnFwDlgsTlb.idl" ]; then
	FILES_TO_SEND_TO_REMOTE_HOST=("${FILES_TO_SEND_TO_REMOTE_HOST[@]}" "$(dirname "$INFILE")/FwKernelTlb.tlb" "$(dirname "$INFILE")/ViewsTlb.tlb" "$(dirname "$INFILE")/LanguageTlb.tlb")
fi

scp -P $REMOTE_PORT "${FILES_TO_SEND_TO_REMOTE_HOST[@]}" "$REMOTE_HOST:$DIR" && 
	ssh -p $REMOTE_PORT "$REMOTE_HOST" "$CMD" && 
	scp -P $REMOTE_PORT "$REMOTE_HOST:$DIR"/$STEM{.h,.tlb} "$LOCAL_TMPDIR" &&
	cp -a "$LOCAL_TMPDIR/$STEM"{.h,.tlb} $(dirname "$OUTFILE_ORIG") ||
	(echo $(basename "$0"): Error communicating with remote host.; exit 1)
